@model MealAnalyticsViewModel

<div class="modal fade" id="mealAnalyticsModal" role="dialog">
    <div class="modal-dialog vertical-align-center">
        <div class="modal-content">

            @if (Model.DailyTotals.Count == 1 && Model.DailyTotals[0].TotalDailyCalories == 0)
            {
                <div style="background-color:#dad7d2;">
                    <div id="noHistoryDiv" style="text-align:center; padding-top:10px;">
                        <span class="redAlertText">No meal history for the past 2 weeks</span>
                    </div>
                    <div style="padding:10px 0 10px 0; text-align:center;">
                        <button type="button" class="btn btn-sm btn-secondary" data-dismiss="modal" data-target="#mealAnalyticsModal">
                            <span>Close</span>
                        </button>
                    </div>
                </div>

            }
            else
            {
            <div id="headerMessageDiv" class="d-flex justify-content-between blueBoxHeader" style="margin-right:0px;">
                <div class="blackHeaderFont">Meals from previous 2 weeks</div>
                <button type="button" class="btn btn-sm btn-secondary" style="height:28px;" data-dismiss="modal" data-target="#mealAnalyticsModal">
                    <span>Close</span>
                </button>
            </div>

                <div id="calorieChartContainer">

                    <canvas id="calChart" width="400" height="400"></canvas>

                </div>

                <div id="macroChartContainer">

                    <canvas id="macroChart" width="400" height="400"></canvas>

                </div>

                <div style="padding:10px 0 10px 0; text-align:center;">
                    <button type="button" class="btn btn-sm btn-secondary" data-dismiss="modal" data-target="#mealAnalyticsModal">
                        <span>Close</span>
                    </button>
                </div>

            }

        </div>
    </div>
</div>

<script>
    $(document).ready(function (){

        if (document.getElementById("headerMessageDiv")) {
            var calChartx = document.getElementById("calChart").getContext('2d');

            var calChart = new Chart(calChartx, {
                type: 'line',
                data: {
                    labels: [
                        @foreach (var dailyCalTotal in Model.DailyTotals)
                        {
                            var last = Model.DailyTotals.Last();

                            <text>"@dailyCalTotal.CalorieDay.ToString("M/d")"</text>
                            if (dailyCalTotal != last)
                            {
                                <text>,</text>
                            }
                        }
                    ],
                    datasets: [{
                        label: "Calories",
                        data: [
                            @foreach (var dailyCalTotal in Model.DailyTotals)
                            {
                                var last = Model.DailyTotals.Last();

                                <text>@dailyCalTotal.TotalDailyCalories</text>
                                if (dailyCalTotal != last)
                                {
                                    <text>,</text>
                                }
                            }
                        ],
                        backgroundColor: 'rgba(105, 0, 132, .2)',
                        borderColor: 'rgba(200, 99, 132, .7)',
                        borderWidth: 2,
                        fill: false
                    }

                ]},
                options: {
                    responsive: true,
                    plugins: {
                        datalabels: {
                            display: false
                        }
                    }
                }
            });

            var macroChartx = document.getElementById("macroChart").getContext('2d');

            var macroChart = new Chart(macroChartx, {
                type: 'pie',
                data: {
                    datasets: [{
					    data: [
						    @Model.FatMonthTotal,
                            @Model.CarbMonthTotal,
                            @Model.ProteinMonthTotal
					    ],
					    backgroundColor: [
						    'rgba(252, 214, 112, 1)',
						    'rgba(102, 204, 153, 1)',
						    'rgba(129, 207, 224, 1)'
					    ],
					    label: 'Macro balance'
				    }],
				    labels: [
					    'Fat',
					    'Carbs',
					    'Protein'
				    ]
                },
                options: {
                    responsive: true,
                    plugins: {
                        datalabels: {
                        formatter: (value, macroChart) => {
                        let sum = 0;
                        let dataArr = macroChart.chart.data.datasets[0].data;
                        dataArr.map(data => {
                            sum += data;
                        });
                        let percentage = (value*100 / sum).toFixed(0)+"%";
                        return percentage;
                    },
                    color: '#fff',
                        }
                    }
                }

            });
        }
        
    });

</script>
